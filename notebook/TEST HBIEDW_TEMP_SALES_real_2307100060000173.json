{
	"name": "TEST HBIEDW_TEMP_SALES_real_2307100060000173",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mjspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c75037ba-d97d-4784-a1a7-710c7a487ddc"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/56d6b236-457d-47db-9ae4-a4452761ab68/resourceGroups/IPpod/providers/Microsoft.Synapse/workspaces/mjsynapseworkspace/bigDataPools/mjspark",
				"name": "mjspark",
				"type": "Spark",
				"endpoint": "https://mjsynapseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mjspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"spark.conf.set(\"spark.sqlanalyticsconnector.dw.database\", \"mjkor\") \r\n",
					"ce1kr01_df = (spark.read\r\n",
					"        .option(Constants.SERVER, \"mjsynapseworkspace.sql.azuresynapse.net\")\r\n",
					"        .option(Constants.DATABASE, \"mjkor\")\r\n",
					"        .option(Constants.QUERY, \"select * from dbo.CE1KR01_D\")\r\n",
					"        .synapsesql()\r\n",
					")\r\n",
					"\r\n",
					"# ce2kr01_df = (spark.read\r\n",
					"#         .option(Constants.SERVER, \"mjsynapseworkspace.sql.azuresynapse.net\")\r\n",
					"#         .option(Constants.DATABASE, \"mjkor\")\r\n",
					"#         .option(Constants.QUERY, \"select * from dbo.CE2KR01_D\")\r\n",
					"#         .synapsesql()\r\n",
					"# )"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import hashlib\r\n",
					"from pyspark.sql.functions import udf\r\n",
					"from pyspark.sql.types import StringType\r\n",
					"\r\n",
					"# UDF 함수를 정의합니다.\r\n",
					"def calculate_md5_hash(value):\r\n",
					"    md5_hash = hashlib.md5(value.encode('utf-16le')).hexdigest()\r\n",
					"    return md5_hash.casefold()\r\n",
					"\r\n",
					"# UDF를 등록합니다.\r\n",
					"md5_hash_ud2f = udf(calculate_md5_hash, StringType())"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# CE1KR01_D - Actual"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import StringType\r\n",
					"import pyspark.sql.functions as F\r\n",
					"from pyspark.sql.functions import *\r\n",
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"import datetime\r\n",
					" \r\n",
					"# yesterday = datetime.datetime.now() - datetime.timedelta(days=1)\r\n",
					"# yesterday = yesterday.strftime('%Y-%m-%d')\r\n",
					"\r\n",
					"yesterday = \"2023-06-29\"\r\n",
					"# 2023-06-26\r\n",
					"# 2023-06-28\r\n",
					"# 2023-06-29\r\n",
					"\r\n",
					"# 키 파라미터\r\n",
					"keys = [\"PALEDGER\", \"VRGAR\", \"VERSI\", \"PERIO\", \"PAOBJNR\", \"PASUBNR\", \"BELNR\", \"POSNR\"]\r\n",
					"\r\n",
					"# Version 컬럼 생성\r\n",
					"ce1kr01_df = ce1kr01_df.withColumn('Version',lit('Actual'))\r\n",
					"\r\n",
					"# Key값들의 Null -> 공백 작업\r\n",
					"ce1kr01_df = ce1kr01_df.na.fill(value=\"\", subset=keys)\r\n",
					"\r\n",
					"key_columns = [col(key) for key in keys]\r\n",
					"for key in keys:\r\n",
					"    # Key값들의 String type 변환\r\n",
					"    ce1kr01_df = ce1kr01_df.withColumn(key, col(key).cast(StringType()))\r\n",
					"    # Key값들의 공백 제거\r\n",
					"    ce1kr01_df = ce1kr01_df.withColumn(key, trim(col(key)))\r\n",
					"    # nullable -> True\r\n",
					"    ce1kr01_df = ce1kr01_df.withColumn(key, when(col(key).isNotNull(), col(key)).otherwise(lit(None)))\r\n",
					"\r\n",
					"# 키값들에 대한 Concat 작업\r\n",
					"ce1kr01_df = ce1kr01_df.withColumn(\"BK_Sales\", F.concat_ws('^',col(\"Version\"),*key_columns))\r\n",
					"# BK_Sales에 md5 인코딩\r\n",
					"ce1kr01_df = ce1kr01_df.withColumn(\"HK_Sales\", md5_hash_ud2f(col(\"BK_Sales\")))\r\n",
					"\r\n",
					"# EDW_LOAD_DTS 추가, RECORD_SRC 컬럼 추가\r\n",
					"    # .withColumn(\"EDW_LOAD_DTS\", from_utc_timestamp(current_timestamp(),'Asia/Seoul')) \\\r\n",
					"ce1kr01_hub_df_with_md5 = ce1kr01_df.withColumn(\"RECORD_SRC\", lit('CE1KR01')) \\\r\n",
					"    .withColumn(\"ODS_LOAD_DATE\", from_utc_timestamp(current_timestamp(),'Asia/Seoul'))\\\r\n",
					"    .select( \r\n",
					"        col(\"HK_Sales\"), \r\n",
					"        col(\"Version\"), \r\n",
					"        col(\"PALEDGER\").alias(\"Currency_Type\"),\r\n",
					"        col(\"VRGAR\").alias(\"Record_Type\"), \r\n",
					"        col(\"VERSI\").alias(\"Plan_version_CO_PA\"), \r\n",
					"        col(\"PERIO\").alias(\"Period_Year\"),\r\n",
					"        col(\"PAOBJNR\").alias(\"Profitability_Segment_Number_CO_PA\"), \r\n",
					"        col(\"PASUBNR\").alias(\"Profitability_Segment_Changes_CO_PA\"),\r\n",
					"        col(\"BELNR\").alias(\"Profitability_Analysis_Chit_Number\"), \r\n",
					"        col(\"POSNR\").alias(\"CO_PA_Item_Number\"),\r\n",
					"        col(\"BK_Sales\")#, \r\n",
					"        #col(\"EDW_LOAD_DTS\"),\r\n",
					"        #col(\"RECORD_SRC\")\r\n",
					"        )\r\n",
					"        # .filter(col(\"ODS_LOAD_DATE\") == yesterday)\r\n",
					"\r\n",
					"# Column의 nullalbe 설정 값을 True로 변경\r\n",
					"ce1kr01_hub_df_with_md5 = ce1kr01_hub_df_with_md5.withColumn(\"Version\", when(col(\"Version\").isNotNull(), col(\"Version\")).otherwise(lit(None))) \r\n",
					"# \\\r\n",
					"#     .withColumn(\"EDW_LOAD_DTS\", when(col(\"EDW_LOAD_DTS\").isNotNull(), col(\"EDW_LOAD_DTS\")).otherwise(lit(None)))\r\n",
					"\r\n",
					"# ce1kr01_hub_df_with_md5.printSchema()\r\n",
					"# display(ce1kr01_hub_df_with_md5)\r\n",
					"\r\n",
					"#  dbo.hub_sales 테이블 적재\r\n",
					"ce1kr01_hub_df_with_md5.write \\\r\n",
					"    .option(Constants.SERVER, \"mjsynapseworkspace.sql.azuresynapse.net\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .synapsesql(\"mjkor.dbo.HUB_Sales_Actual\")\r\n",
					"\r\n",
					"print(ce1kr01_hub_df_with_md5.count())\r\n",
					"\r\n",
					"# ce1kr01_sat_df_with_md5 = ce1kr01_df.withColumn(\"EDW_LOAD_DTS\", from_utc_timestamp(current_timestamp(),'Asia/Seoul'))\\\r\n",
					"#     .withColumn(\"RECORD_SRC\", lit('CE1KR01'))\\\r\n",
					"#     .withColumn(\"ODS_LOAD_DATE\", date_format(col(\"ODS_LOAD_DTS\"), \"yyyy-MM-dd\"))\\\r\n",
					"#     .select(\r\n",
					"#         col(\"HK_Sales\").alias(\"HK_Sales_Actual\"),\r\n",
					"#         col(\"BK_Sales\").alias(\"BK_Sales_Actual\"),\r\n",
					"#         col(\"HZDAT\").alias(\"Create_Date\"),\r\n",
					"#         col(\"USNAM\").alias(\"Constructor_Name\"),\r\n",
					"    #     col(\"GJAHR\").alias(\"Fiscal_Year\"),\r\n",
					"    #     col(\"PERDE\").alias(\"Period\"),\r\n",
					"    #     col(\"WADAT\").alias(\"Ship_Date\"),\r\n",
					"    #     col(\"FADAT\").alias(\"Invoice_Date\"),\r\n",
					"    #     col(\"BUDAT\").alias(\"Posting_Date\"),\r\n",
					"    #     col(\"KNDNR\").alias(\"Customer_Number\"),\r\n",
					"    #     col(\"ARTNR\").alias(\"Product_Number\"),\r\n",
					"    #     col(\"FKART\").alias(\"Billing_Type\"),\r\n",
					"    #     col(\"FRWAE\").alias(\"Foreign_Currency_Key\"),\r\n",
					"    #     col(\"KAUFN\").alias(\"Sales_Order_Number\"),\r\n",
					"    #     col(\"KDPOS\").alias(\"Sales_Order_Item_Number\"),\r\n",
					"    #     col(\"RKAUFNR\").alias(\"Order_Number\"),\r\n",
					"    #     col(\"SKOST\").alias(\"Sender_Cost_Center\"),\r\n",
					"    #     col(\"FKBER\").alias(\"Functional_Area\"),\r\n",
					"    #     col(\"VTWEG\").alias(\"Distribution_Channel_Code\"),\r\n",
					"    #     when(ce1kr01_df.VTWEG == \"K1\", \"Direct\").when(ce1kr01_df.VTWEG == \"K2\", \"Indirect\").when(ce1kr01_df.VTWEG == \"K3\", \"Logistics\").otherwise(ce1kr01_df.VTWEG).alias(\"Distribution_Channel_Desc\"),\r\n",
					"    #     col(\"KSTAR\").alias(\"Cost_Element\"),\r\n",
					"    #     col(\"COPA_KOSTL\").alias(\"Cost_Center\"),\r\n",
					"    #     col(\"RBELN\").alias(\"Reference_document_number_for_CO_PA_line_item\"),\r\n",
					"    #     col(\"RPOSN\").alias(\"CO_PA_Reference_Document_Item_Number\"),\r\n",
					"    #     col(\"STO_BELNR\").alias(\"Canceled_Document\"),\r\n",
					"    #     col(\"STO_POSNR\").alias(\"Canceled_Document_Item\"),\r\n",
					"    #     col(\"PRCTR\").alias(\"Profit_Center\"),\r\n",
					"    #     col(\"PPRCTR\").alias(\"Partner_PCTR\"),\r\n",
					"    #     col(\"TIMESTMP\").alias(\"UTC_Create_Date\"),\r\n",
					"    #     col(\"COPA_AWTYP\").alias(\"Reference_Procedure\"),\r\n",
					"    #     col(\"COPA_AWORG\").alias(\"Reference_Organizational_Units\"),\r\n",
					"    #     col(\"LAND1\").alias(\"Country_Region_Key\"),\r\n",
					"    #     col(\"VKBUR\").alias(\"Sales_Office\"),\r\n",
					"    #     col(\"VKGRP\").alias(\"Sales_Group\"),\r\n",
					"    #     col(\"MTART\").alias(\"Material_Type\"),\r\n",
					"    #     col(\"WWBKL\").alias(\"Valuation_Class\"),\r\n",
					"    #     col(\"MVGR2\").alias(\"Material_Group2\"),\r\n",
					"    #     col(\"MVGR3\").alias(\"Material_Group3\"),\r\n",
					"    #     col(\"MVGR4\").alias(\"Material_Group4\"),\r\n",
					"    #     col(\"MVGR5\").alias(\"Material_Group5\"),\r\n",
					"    #     col(\"WW001\").alias(\"BU\"),\r\n",
					"    #     col(\"WW002\").alias(\"MKT_Line\"),\r\n",
					"    #     col(\"WW003\").alias(\"Brand_Group\"),\r\n",
					"    #     col(\"WW004\").alias(\"Brand\"),\r\n",
					"    #     col(\"WW007\").alias(\"Channel\"),\r\n",
					"    #     col(\"WW010\").alias(\"Domestic_Export_Code\"),\r\n",
					"    #     col(\"WW100\").alias(\"Sales_Division_Code\"),\r\n",
					"    #     col(\"ZZCUS\").alias(\"End_Customer_Number\"),\r\n",
					"    #     col(\"AUART\").alias(\"Sales_Document_Type_Code\"),\r\n",
					"    #     ## CASE WHEN AUART IN ('KA','KR','RE') THEN '반품' ELSE '판매' END AS Sales_Type\r\n",
					"    #     when((ce1kr01_df.AUART == \"KA\") | (ce1kr01_df.AUART == \"KR\") | (ce1kr01_df.AUART == \"RE\"), \"반품\").otherwise(\"판매\").alias(\"Sales_Type\"),\r\n",
					"    #     col(\"PSTYV\").alias(\"Sales_Document_Item_Category_Code\"),\r\n",
					"    #     col(\"KUNWE\").alias(\"Delivery_Destination_Code\"),\r\n",
					"    #     col(\"WWDOC\").alias(\"Global_Document_Type\"),\r\n",
					"    #     col(\"WW900\").alias(\"MR_Sales_Employee\"),\r\n",
					"    #     col(\"WW901\").alias(\"BU_MR\"),\r\n",
					"    #     col(\"WW902\").alias(\"Room_MR\"),\r\n",
					"    #     col(\"WW903\").alias(\"Team_MR\"),\r\n",
					"    #     col(\"ABSMG_ME\").alias(\"Base_Unit1\"),\r\n",
					"    #     col(\"VVSMG_ME\").alias(\"Base_Unit3\"),\r\n",
					"    #     col(\"ABSMG\").alias(\"Sales_quantity\"),\r\n",
					"    #     # -- Condition_Flag : AS-IS 조건절에 있던 조회조건 Sales 관련 Measure + 개별 낱개수량(VV001)\r\n",
					"    #     when((abs(ce1kr01_df.VV111) + abs(ce1kr01_df.VV112) + abs(ce1kr01_df.VV113) + abs(ce1kr01_df.VV114) + abs(ce1kr01_df.VV115)\\\r\n",
					"    #      + abs(ce1kr01_df.VV116) + abs(ce1kr01_df.VV121) + abs(ce1kr01_df.VV001)) > 0, 1).otherwise(0).alias(\"Condition_Flag\"),\r\n",
					"    #     col(\"VV001\").alias(\"Individual_Quantity\"),\r\n",
					"    #     col(\"VVSMG\").alias(\"Free_Sales\"),\r\n",
					"    #     col(\"VV111\").alias(\"Gross_Sales\"),\r\n",
					"    #     col(\"VV112\").alias(\"Toll_Sales\"),\r\n",
					"    #     col(\"VV113\").alias(\"Contract_Sales\"),\r\n",
					"    #     col(\"VV114\").alias(\"Sales_Returns\"),\r\n",
					"    #     col(\"VV115\").alias(\"Cash_Discounts\"),\r\n",
					"    #     col(\"VV116\").alias(\"Return_Provisions\"),\r\n",
					"    #     col(\"VV121\").alias(\"Revenues_Services\"),\r\n",
					"    #     col(\"VV201\").alias(\"COGS_General\"),\r\n",
					"    #     col(\"VV221\").alias(\"Price_Difference\"),\r\n",
					"    #     col(\"VV222\").alias(\"Diligence\"),\r\n",
					"    #     col(\"VV223\").alias(\"Waste_Loss\"),\r\n",
					"    #     col(\"VV224\").alias(\"Quality_Inspection\"),\r\n",
					"    #     col(\"VV225\").alias(\"Differences\"),\r\n",
					"    #     col(\"VV229\").alias(\"Rating\"),\r\n",
					"    #     col(\"VV231\").alias(\"Sample_Cost\"),\r\n",
					"    #     col(\"VV232\").alias(\"Donation\"),\r\n",
					"    #     col(\"VV233\").alias(\"Consumables_Research\"),\r\n",
					"    #     col(\"VV234\").alias(\"Entertainment_Expenses\"),\r\n",
					"    #     col(\"VV235\").alias(\"Advertising_Expenses\"),\r\n",
					"    #     col(\"VV236\").alias(\"Employee_Benefits\"),\r\n",
					"    #     col(\"VV237\").alias(\"Distribution_Promotion\"),\r\n",
					"    #     col(\"VV239\").alias(\"SD_Sample_Cost\"),\r\n",
					"    #     col(\"VV241\").alias(\"PPI\"),\r\n",
					"    #     col(\"VV411\").alias(\"Direct_Distribution\"),\r\n",
					"    #     col(\"VV412\").alias(\"Alloc_Dist\"),\r\n",
					"    #     col(\"VV421\").alias(\"Royalty\"),\r\n",
					"    #     col(\"VV431\").alias(\"Medical_Studies\"),\r\n",
					"    #     col(\"VV432\").alias(\"Medical_Support\"),\r\n",
					"    #     col(\"VV441\").alias(\"Brochures_Leaflet\"),\r\n",
					"    #     col(\"VV442\").alias(\"Gimmick_POSM\"),\r\n",
					"    #     col(\"VV443\").alias(\"Ad_Production\"),\r\n",
					"    #     col(\"VV444\").alias(\"Ad_Expense\"),\r\n",
					"    #     col(\"VV445\").alias(\"Samples\"),\r\n",
					"    #     col(\"VV446\").alias(\"Sales_Incentive\"),\r\n",
					"    #     col(\"VV447\").alias(\"SSI_GD_ID\"),\r\n",
					"    #     col(\"VV448\").alias(\"SSI_GD_ID_Sales\"),\r\n",
					"    #     col(\"VV449\").alias(\"SSI_Seminar\"),\r\n",
					"    #     col(\"VV44A\").alias(\"Others\"),\r\n",
					"    #     col(\"VV451\").alias(\"Internal_SF_Salary\"),\r\n",
					"    #     col(\"VV452\").alias(\"Internal_SF_Expense\"),\r\n",
					"    #     col(\"VV454\").alias(\"Sales_Management_S\"),\r\n",
					"    #     col(\"VV455\").alias(\"Sales_Management_E\"),\r\n",
					"    #     col(\"VV456\").alias(\"Allocation_Sales_S\"),\r\n",
					"    #     col(\"VV457\").alias(\"Allocation_Sales_E\"),\r\n",
					"    #     col(\"VV461\").alias(\"MedMgmtAlloc_S\"),\r\n",
					"    #     col(\"VV462\").alias(\"MedMgmtAlloc_E\"),\r\n",
					"    #     col(\"VV471\").alias(\"Marketing_Mgmt_S\"),\r\n",
					"    #     col(\"VV472\").alias(\"Marketing_Mgmt_E\"),\r\n",
					"    #     col(\"VV473\").alias(\"AllocMarketing_S\"),\r\n",
					"    #     col(\"VV474\").alias(\"AllocMarketing_E\"),\r\n",
					"    #     col(\"VV481\").alias(\"Brand_Amortization\"),\r\n",
					"    #     col(\"VV482\").alias(\"Equip_Amortization\"),\r\n",
					"    #     col(\"VV491\").alias(\"Marketing_Supt_Fee\"),\r\n",
					"    #     col(\"VV611\").alias(\"Med_Mgmt_S\"),\r\n",
					"    #     col(\"VV612\").alias(\"Med_Mgmt_E\"),\r\n",
					"    #     col(\"VV613\").alias(\"RA_Salary\"),\r\n",
					"    #     col(\"VV614\").alias(\"RA_Expense\"),\r\n",
					"    #     col(\"VV615\").alias(\"PV_CQ_Salary\"),\r\n",
					"    #     col(\"VV616\").alias(\"PV_CQ_Expense\"),\r\n",
					"    #     col(\"VV621\").alias(\"R&D_S\"),\r\n",
					"    #     col(\"VV622\").alias(\"R&D_E\"),\r\n",
					"    #     col(\"VV623\").alias(\"GX_H9\"),\r\n",
					"    #     col(\"VV624\").alias(\"Clin_Development\"),\r\n",
					"    #     col(\"VV625\").alias(\"Project_R&D\"),\r\n",
					"    #     col(\"VV631\").alias(\"Biz_Development\"),\r\n",
					"    #     col(\"VV641\").alias(\"G&A_Salary\"),\r\n",
					"    #     col(\"VV642\").alias(\"G&A_Expense\"),\r\n",
					"    #     col(\"VV643\").alias(\"Amort_Intangibles_G\"),\r\n",
					"    #     col(\"VV644\").alias(\"Doubtful_Debts\"),\r\n",
					"    #     col(\"VV649\").alias(\"G&A_Other\"),\r\n",
					"    #     col(\"VV811\").alias(\"Eq_GnL_Inv\"),\r\n",
					"    #     col(\"VV831\").alias(\"Interest_Income\"),\r\n",
					"    #     col(\"VV832\").alias(\"Interest_Expenses\"),\r\n",
					"    #     col(\"VV841\").alias(\"GnL_FC_Transaction\"),\r\n",
					"    #     col(\"VV842\").alias(\"GnL_FC_Translation\"),\r\n",
					"    #     col(\"VV851\").alias(\"GnL_Investment\"),\r\n",
					"    #     col(\"VV852\").alias(\"Other_financial_GnL\"),\r\n",
					"    #     col(\"VV911\").alias(\"Tax\"),\r\n",
					"    #     col(\"VVS00\").alias(\"Standard_Cost\"),\r\n",
					"    #     col(\"VVS01\").alias(\"S_RAW_Material_Cost\"),\r\n",
					"    #     col(\"VVS05\").alias(\"S_Packaging_Material_Cost\"),\r\n",
					"    #     col(\"VVS07\").alias(\"S_Sub_Contract\"),\r\n",
					"    #     col(\"VVS08\").alias(\"S_Merchandise\"),\r\n",
					"    #     col(\"VVS09\").alias(\"S_Labor\"),\r\n",
					"    #     col(\"VVS11\").alias(\"S_QC\"),\r\n",
					"    #     col(\"VVS13\").alias(\"S_Machine\"),\r\n",
					"    #     col(\"VVS15\").alias(\"S_PRC\"),\r\n",
					"    #     col(\"VVS17\").alias(\"S_Factory_Overhead\"),\r\n",
					"    #     col(\"VVA00\").alias(\"Actual_Cost\"),\r\n",
					"    #     col(\"VVA01\").alias(\"A_RAW_Material_Cost\"),\r\n",
					"    #     col(\"VVA05\").alias(\"A_Packaging_Material_Cost\"),\r\n",
					"    #     col(\"VVA06\").alias(\"A_Semi_Bulk\"),\r\n",
					"    #     col(\"VVA07\").alias(\"A_Sub_Contract\"),\r\n",
					"    #     col(\"VVA08\").alias(\"A_Merchandise\"),\r\n",
					"    #     col(\"VVA09\").alias(\"A_Labor\"),\r\n",
					"    #     col(\"VVA11\").alias(\"A_QC\"),\r\n",
					"    #     col(\"VVA13\").alias(\"A_Machine\"),\r\n",
					"    #     col(\"VVA15\").alias(\"A_PRC\"),\r\n",
					"    #     col(\"VVA17\").alias(\"A_Factory_Overhead\"),\r\n",
					"    #     col(\"VV209\").alias(\"COGS_Adjustment_FI\"),\r\n",
					"    #     col(\"VV228\").alias(\"Standard_Cost_Change_Vehicle_FI\"),\r\n",
					"    #     col(\"VV219\").alias(\"Other_Variance\"),\r\n",
					"    #     col(\"VV459\").alias(\"Internal_SF_Salary2\"),\r\n",
					"    #     col(\"LASTCHANGEDAT\").alias(\"LASTCHANGEDAT\"),\r\n",
					"    #     col(\"ODS_LOAD_DTS\").alias(\"ODS_LOAD_DTS\"),\r\n",
					"    #     col(\"EDW_LOAD_DTS\"),\r\n",
					"    #     col(\"RECORD_SRC\")\r\n",
					"    # ) #.filter(col(\"ODS_LOAD_DATE\") == yesterday)\r\n",
					"\r\n",
					"# Column의 nullalbe 설정 값을 True로 변경\r\n",
					"# ce1kr01_sat_df_with_md5 = ce1kr01_sat_df_with_md5.withColumn(\"EDW_LOAD_DTS\", when(col(\"EDW_LOAD_DTS\").isNotNull(), col(\"EDW_LOAD_DTS\")).otherwise(lit(None)))\r\n",
					"\r\n",
					"# ce1kr01_sat_df_with_md5.printSchema()\r\n",
					"\r\n",
					"# # dbo.SAT_Sales_PY 테이블 적재\r\n",
					"# ce1kr01_sat_df_with_md5.write \\\r\n",
					"#     .option(Constants.SERVER, \"mjsynapseworkspace.sql.azuresynapse.net\") \\\r\n",
					"#     .mode(\"overwrite\") \\\r\n",
					"#     .synapsesql(\"mjkor.dbo.SAT_Sales_Actual\")\r\n",
					"\r\n",
					"# print(ce1kr01_sat_df_with_md5.count())\r\n",
					"\r\n",
					"## HUB, SAT 테이블에 5건 각각 적재 : 4분 11초\r\n",
					"## 2023-06-29(4건) HUB, SAT 테이블 적재 / 5분 4초\r\n",
					"## 2023-06-29(4건) HUB, SAT 테이블 적재 / 8분 54초"
				]
			}
		]
	}
}